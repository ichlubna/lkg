--- evaluator_interactiveORIG.py	2022-02-24 11:38:21.002030084 +0100
+++ core/evaluator_interactive.py	2022-03-02 11:48:16.583041480 +0100
@@ -1,4 +1,6 @@
 import tensorflow as tf
+import matplotlib
+matplotlib.use('Agg')
 import matplotlib.pyplot as plt
 from matplotlib.widgets import Slider
 import numpy as np
@@ -83,7 +85,7 @@
 
     return pre_dof, pre_depth
 
-def evaluate(eval_config):
+def evaluate(eval_config, x, y):
     run_dof_func, run_depth_func = construct_graph(eval_config)
     image_path = eval_config.image_path
     start_id = 0
@@ -104,7 +106,11 @@
     plt.figure(3)
     depth_handle = plt.imshow(pre_depth[0,:,:,0])
     renderdof = RenderDoF(im_handle, depth_handle, slider, im, run_dof_func, run_depth_func, start_id, image_names)
-    plt.show()
+    
+    im.set_focal_point(x,y)
+    dof = renderdof.render()
+    cv2.imwrite("./test.png", dof*255)
+    #plt.show()
 
 def _normalize(x):
     x = x.astype(np.float32)
@@ -112,10 +118,10 @@
 
 class ImageWrapper(object):
     def __init__(self, im, depth=None, dof=None, x=0, y=0, aperture=1.0):
-        if np.max(im.shape) > 1280:
-            scale = 1280.0 / np.max(im.shape)
-            shape =  np.int32(np.array(im.shape) * scale)
-            im = cv2.resize(im, (shape[1], shape[0]), interpolation=cv2.INTER_AREA)
+    #    if np.max(im.shape) > 1280:
+    #        scale = 1280.0 / np.max(im.shape)
+    #        shape =  np.int32(np.array(im.shape) * scale)
+    #        im = cv2.resize(im, (shape[1], shape[0]), interpolation=cv2.INTER_AREA)
         self.im = im
         if np.max(im.shape) >= 1280:
             self.scale = 4
@@ -197,6 +203,7 @@
         #self.im_handle.set_data(im_640[:,:,-1::-1])
         #self.im_handle.set_data(blured_im)
         self.im_handle.figure.canvas.draw()
+        return dof
 
 
     def on_key(self, event):
